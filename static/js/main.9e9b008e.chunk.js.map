{"version":3,"sources":["components/Sidebar.js","components/Header.js","components/TransactionTable.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","_jsxs","className","style","width","children","_jsx","Nav","Link","href","Header","Navbar","bg","expand","Container","Brand","TransactionTable","data","setData","useState","loading","setLoading","useEffect","axios","get","then","response","catch","error","console","columns","useMemo","accessor","Cell","_ref","row","Button","variant","onClick","handleDetails","original","marginRight","handleEdit","FaEdit","handleDelete","id","FaTrashAlt","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","globalFilter","setGlobalFilter","useTable","initialState","sortBy","desc","useGlobalFilter","useSortBy","alert","concat","transaction","transactionId","window","confirm","prevData","filter","item","Form","Control","type","placeholder","value","onChange","e","target","marginBottom","exportToCSV","csvData","map","date","title","Status","status","csvContent","join","forEach","Object","values","encodedUri","encodeURI","link","document","createElement","setAttribute","click","exportToExcel","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","marginLeft","exportToPDF","doc","jsPDF","tableRows","autoTable","save","Table","_objectSpread","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","cursor","render","isSorted","isSortedDesc","colSpan","getRowProps","cells","cell","getCellProps","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","React","StrictMode"],"mappings":"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","file":"static/js/main.9e9b008e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <div className=\"sidebar bg-dark text-white p-3\" style={{ width: '250px' }}>\r\n      <h4>Transaction Dashboard</h4>\r\n      <Nav className=\"flex-column\">\r\n        <Nav.Link href=\"#\">Dashboard</Nav.Link>\r\n        <Nav.Link href=\"#\">Transactions</Nav.Link>\r\n        <Nav.Link href=\"#\">Reports</Nav.Link>\r\n      </Nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport { Navbar, Container } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#\">Transaction Dashboard</Navbar.Brand>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { useTable, useSortBy, useGlobalFilter } from \"react-table\";\r\nimport axios from \"axios\";\r\nimport { Table, Form, Button } from \"react-bootstrap\"; // Use Form.Control for input field\r\nimport { FaEdit, FaTrashAlt } from \"react-icons/fa\"; // Import icons for Edit and Delete\r\nimport * as XLSX from \"xlsx\"; // For Excel export\r\nimport jsPDF from \"jspdf\"; // For PDF export\r\nimport \"jspdf-autotable\"; // For PDF tables\r\n\r\nconst TransactionTable = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetching data from a public API (example: JSONPlaceholder)\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/posts\") // Change to your API\r\n      .then((response) => {\r\n        setData(response.data); // Assuming API returns an array of objects\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data\", error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Transaction ID\",\r\n        accessor: \"id\", // Data field to be displayed in this column\r\n      },\r\n      {\r\n        Header: \"Transaction Date\",\r\n        accessor: \"date\", // You can format the date as needed\r\n      },\r\n      {\r\n        Header: \"Transaction Details\",\r\n        accessor: \"title\", // Using title as a placeholder for transaction details\r\n      },\r\n      {\r\n        Header: \"Status\",\r\n        accessor: \"status\", // Add a status field as necessary\r\n      },\r\n      {\r\n        Header: \"Action\",\r\n        accessor: \"action\", // Placeholder for action buttons\r\n        Cell: ({ row }) => (\r\n          <div>\r\n            <Button\r\n              variant=\"info\"\r\n              onClick={() => handleDetails(row.original)} // Show transaction details\r\n              style={{ marginRight: \"5px\" }}\r\n            >\r\n              Details\r\n            </Button>\r\n            <Button\r\n              variant=\"warning\"\r\n              onClick={() => handleEdit(row.original)} // Edit functionality\r\n              style={{ marginRight: \"5px\" }}\r\n            >\r\n              <FaEdit /> Edit\r\n            </Button>\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={() => handleDelete(row.original.id)} // Delete functionality\r\n            >\r\n              <FaTrashAlt /> Delete\r\n            </Button>\r\n          </div>\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  // Using react-table hooks\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    state: { globalFilter },\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { sortBy: [{ id: \"id\", desc: false }] }, // Default sorting by Transaction ID\r\n    },\r\n    useGlobalFilter, // For searching\r\n    useSortBy // For sorting\r\n  );\r\n\r\n  // Handler for showing details (mock implementation)\r\n  const handleDetails = (row) => {\r\n    alert(`Details for Transaction ID: ${row.original.id}`);\r\n  };\r\n\r\n  // Edit Handler (mock implementation)\r\n  const handleEdit = (transaction) => {\r\n    alert(`Editing Transaction ID: ${transaction.id}`);\r\n    // You can add logic here to open an edit modal or navigate to an edit page.\r\n  };\r\n\r\n  // Delete Handler (mock implementation)\r\n  const handleDelete = (transactionId) => {\r\n    const confirmDelete = window.confirm(\r\n      `Are you sure you want to delete Transaction ID: ${transactionId}?`\r\n    );\r\n    if (confirmDelete) {\r\n      alert(`Transaction ID: ${transactionId} deleted.`);\r\n      // You can add logic here to delete the transaction from the API or state\r\n      setData((prevData) => prevData.filter((item) => item.id !== transactionId));\r\n    }\r\n  };\r\n\r\n  // Export to CSV\r\n  const exportToCSV = () => {\r\n    const csvData = data.map((row) => ({\r\n      \"Transaction ID\": row.id,\r\n      \"Transaction Date\": row.date,\r\n      \"Transaction Details\": row.title,\r\n      Status: row.status,\r\n    }));\r\n    const header = [\r\n      \"Transaction ID\",\r\n      \"Transaction Date\",\r\n      \"Transaction Details\",\r\n      \"Status\",\r\n    ];\r\n    let csvContent = \"data:text/csv;charset=utf-8,\" + header.join(\",\") + \"\\n\";\r\n    csvData.forEach((row) => {\r\n      csvContent += Object.values(row).join(\",\") + \"\\n\";\r\n    });\r\n\r\n    // Create a download link and trigger it\r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"transactions.csv\");\r\n    link.click();\r\n  };\r\n\r\n  // Export to Excel\r\n  const exportToExcel = () => {\r\n    const ws = XLSX.utils.json_to_sheet(data);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Transactions\");\r\n    XLSX.writeFile(wb, \"transactions.xlsx\");\r\n  };\r\n\r\n  // Export to PDF\r\n  const exportToPDF = () => {\r\n    const doc = new jsPDF();\r\n    const tableColumn = [\r\n      \"Transaction ID\",\r\n      \"Transaction Date\",\r\n      \"Transaction Details\",\r\n      \"Status\",\r\n    ];\r\n    const tableRows = data.map((row) => [\r\n      row.id,\r\n      row.date,\r\n      row.title,\r\n      row.status,\r\n    ]);\r\n\r\n    doc.autoTable(tableColumn, tableRows);\r\n    doc.save(\"transactions.pdf\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form.Control\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={globalFilter || \"\"}\r\n        onChange={(e) => setGlobalFilter(e.target.value)}\r\n        style={{ marginBottom: \"10px\" }}\r\n      />\r\n\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <Button variant=\"success\" onClick={exportToCSV}>\r\n          Export to CSV\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={exportToExcel} style={{ marginLeft: \"10px\" }}>\r\n          Export to Excel\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={exportToPDF} style={{ marginLeft: \"10px\" }}>\r\n          Export to PDF\r\n        </Button>\r\n      </div>\r\n\r\n      <Table {...getTableProps()} striped bordered hover>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  {column.render(\"Header\")}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \" 🔽\"\r\n                        : \" 🔼\"\r\n                      : \"\"}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {loading ? (\r\n            <tr>\r\n              <td colSpan=\"5\">Loading...</td>\r\n            </tr>\r\n          ) : (\r\n            rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                  })}\r\n                </tr>\r\n              );\r\n            })\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionTable;\r\n","import React from 'react';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport TransactionTable from './components/TransactionTable';\n\nconst App = () => {\n  return (\n    <div className=\"d-flex\">\n      <Sidebar />\n      <div className=\"flex-grow-1\">\n        <Header />\n        <TransactionTable />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}